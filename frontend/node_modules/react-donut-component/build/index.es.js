import React, { useEffect, useState, Children, cloneElement } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; }\n\n.Donut {\n  display: flex;\n  position: relative; }\n  .Donut__svg {\n    border-radius: 50%;\n    display: block; }\n  .Donut__track {\n    fill: transparent; }\n  .Donut__indicator {\n    fill: transparent;\n    stroke-dasharray: 0 10000;\n    transition: all 2s ease; }\n";
styleInject(css_248z);

var css_248z$1 = "*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; }\n\n.Donut__value-container {\n  display: flex;\n  position: relative;\n  font-family: sans-serif; }\n";
styleInject(css_248z$1);

var DonutValue = function (_a) {
    var _b = _a.children, children = _b === void 0 ? 0 : _b, style = _a.style, styleSymbol = _a.styleSymbol, styleContainer = _a.styleContainer, presentValue = _a.presentValue, symbol = _a.symbol, _c = _a.symbolPosition, symbolPosition = _c === void 0 ? 'bottom-right' : _c, className = _a.className, _d = _a.showValue, showValue = _d === void 0 ? true : _d;
    useEffect(function () {
        if (presentValue) {
            presentValue(children);
        }
    }, [presentValue, children]);
    return showValue ? (React.createElement("div", { style: __assign({ alignItems: symbolPosition === 'top-right' || symbolPosition === 'top-left'
                ? ''
                : 'baseline', flexDirection: symbolPosition === 'bottom-left' || symbolPosition === 'top-left'
                ? 'row-reverse'
                : 'initial', left: symbolPosition === 'bottom-left' || symbolPosition === 'top-left'
                ? '0'
                : '6px' }, styleContainer), className: 'Donut__value-container' },
        React.createElement("span", { style: style, className: "Donut__value " + className }, children),
        React.createElement("span", { "data-testid": 'symbol', style: styleSymbol, className: 'Donut__symbol' }, symbol || '%'))) : null;
};

var Donut = function (_a) {
    var _b = _a.size, size = _b === void 0 ? 180 : _b, _c = _a.strokeWidth, strokeWidth = _c === void 0 ? 15 : _c, className = _a.className, children = _a.children, _d = _a.color, color = _d === void 0 ? 'black' : _d, style = _a.style, _e = _a.trackColor, trackColor = _e === void 0 ? '#dfdff1' : _e, trackStrokeWidth = _a.trackStrokeWidth, styleTrack = _a.styleTrack, styleIndicator = _a.styleIndicator, _f = _a.animate, animate = _f === void 0 ? false : _f, _g = _a.linecap, linecap = _g === void 0 ? 'butt' : _g, indicatorStrokeWidth = _a.indicatorStrokeWidth, _h = _a.indicatorColor, indicatorColor = _h === void 0 ? 'black' : _h;
    var _j = useState(0), value = _j[0], setValue = _j[1];
    var halfSize = size * 0.5;
    var radius = halfSize - strokeWidth * 0.5;
    var circumference = 2 * Math.PI * radius;
    var strokeval = (value * circumference) / 100;
    var strokeDasharray = strokeval + " " + circumference;
    var rotateVal = "rotate(-90 " + halfSize + "," + halfSize + ")";
    var presentValue = function (value) {
        setValue(value);
    };
    return (React.createElement("div", { style: { width: size, color: color }, "data-testid": 'donut', className: 'Donut' },
        React.createElement("svg", { style: style, width: size, height: size, className: "Donut__svg " + className },
            React.createElement("circle", { r: radius, cx: halfSize, cy: halfSize, transform: rotateVal, style: styleTrack
                    ? __assign({ strokeWidth: trackStrokeWidth
                            ? trackStrokeWidth
                            : strokeWidth, stroke: trackColor }, styleTrack) : {
                    strokeWidth: trackStrokeWidth
                        ? trackStrokeWidth
                        : strokeWidth,
                    stroke: trackColor,
                }, className: 'Donut__track' }),
            React.createElement("circle", { r: radius, cx: halfSize, cy: halfSize, transform: rotateVal, style: styleIndicator
                    ? __assign({ strokeWidth: indicatorStrokeWidth
                            ? indicatorStrokeWidth
                            : strokeWidth, strokeDasharray: strokeDasharray, stroke: indicatorColor ? indicatorColor : color, transition: animate ? 'all 2s ease' : 'initial' }, styleIndicator) : {
                    strokeWidth: indicatorStrokeWidth
                        ? indicatorStrokeWidth
                        : strokeWidth,
                    strokeDasharray: strokeDasharray,
                    stroke: indicatorColor ? indicatorColor : color,
                    transition: animate ? 'all 2s ease' : 'initial',
                }, className: 'Donut__indicator', strokeLinecap: linecap })),
        React.createElement("div", { className: 'Donut__text-container' }, typeof children === 'number' ||
            typeof children === 'string' ||
            typeof children === 'undefined' ? (React.createElement(DonutValue, { presentValue: presentValue }, children === 'undefined' ? '0' : children)) : (Children.map(children, function (child) {
            return cloneElement(child, { presentValue: presentValue });
        })))));
};

var css_248z$2 = "*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; }\n\n.Donut__label {\n  font-size: 12px;\n  position: relative;\n  font-family: sans-serif; }\n\n.Donut__text-container {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-end; }\n\n.Donut__value {\n  font-size: 40px; }\n\n.Donut__symbol {\n  font-size: 12px; }\n";
styleInject(css_248z$2);

var DonutLabel = function (_a) {
    var children = _a.children, className = _a.className, style = _a.style, multiple = _a.multiple;
    return (React.createElement("h6", { style: style, className: (multiple ? 'Donut-multiple__label' : 'Donut__label') + " " + (className || '') }, children || ''));
};

var css_248z$3 = "*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box; }\n\n.Donut-multiple {\n  position: relative;\n  margin: 0;\n  font-family: sans-serif; }\n  .Donut-multiple__label {\n    margin: 0;\n    font-size: 14px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%); }\n  .Donut-multiple__subtitles {\n    margin: auto;\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%); }\n  .Donut-multiple__block-color {\n    width: 10px;\n    height: 10px;\n    background-color: gray;\n    margin-top: 4px; }\n  .Donut-multiple__subtitle {\n    margin: 8px 0px;\n    display: flex;\n    align-content: center; }\n  .Donut-multiple__subtitle-name {\n    margin-left: 6px; }\n";
styleInject(css_248z$3);

var DonutSubtitle = function (_a) {
    var name = _a.name, color = _a.color;
    return (React.createElement("div", { className: 'Donut-multiple__subtitle' },
        React.createElement("div", { className: 'Donut-multiple__block-color', style: { backgroundColor: color } }),
        React.createElement("span", { className: 'Donut-multiple__subtitle-name' }, name)));
};

var donutElement = 'DonutElement';
var donutLabel = 'DonutLabel';
var DonutMultiple = function (_a) {
    var _b = _a.size, size = _b === void 0 ? 275 : _b, _c = _a.strokeWidth, strokeWidth = _c === void 0 ? 7 : _c, _d = _a.animate, animate = _d === void 0 ? false : _d, _e = _a.linecap, linecap = _e === void 0 ? 'butt' : _e, children = _a.children, className = _a.className;
    var cx = 50;
    var cy = 50;
    var dashArray = 2 * Math.PI * 30;
    var radius = 30;
    var startAngle = -90;
    var sum = Array.from(children).reduce(function (sum, child) {
        if (child.type.name === donutElement) {
            return sum + Number(child.props.children);
        }
        return sum;
    }, 0);
    var ratio = 100 / Number(sum);
    var filled = 0;
    return (React.createElement("div", { style: { width: size }, className: 'Donut-multiple', "data-testid": 'donut-multiple' },
        React.createElement("svg", { className: className, strokeLinecap: linecap, width: size, viewBox: '0 0 100 100' }, Children.map(children, function (child) {
            if (child.type.name === donutElement) {
                var value = Number(child.props.children);
                var itemRatio = ratio * value;
                var angle = (filled * 360) / 100 + startAngle;
                var offset = dashArray - (dashArray * itemRatio) / 100;
                filled += itemRatio;
                return cloneElement(child, {
                    cx: cx,
                    cy: cy,
                    strokeWidth: strokeWidth,
                    dashArray: dashArray,
                    radius: radius,
                    startAngle: startAngle,
                    ratio: ratio,
                    angle: angle,
                    offset: offset,
                    itemRatio: itemRatio,
                    filled: filled,
                    animate: animate,
                });
            }
        })),
        Children.map(children, function (child) {
            if (child.type.name === donutLabel) {
                return cloneElement(child, { multiple: true });
            }
        }),
        React.createElement("div", { className: 'Donut-multiple__subtitles' }, Children.map(children, function (child) {
            if (child.type.name === donutElement && child.props.name) {
                return cloneElement(React.createElement(DonutSubtitle, { name: child.props.name, color: child.props.color || 'black' }));
            }
        }))));
};

var DonutElement = function (_a) {
    var _b = _a.color, color = _b === void 0 ? 'black' : _b, cx = _a.cx, cy = _a.cy, radius = _a.radius, strokeWidth = _a.strokeWidth, dashArray = _a.dashArray, startAngle = _a.startAngle, angle = _a.angle, offset = _a.offset, _c = _a.animate, animate = _c === void 0 ? false : _c;
    return (React.createElement("circle", { "data-testid": 'donut-element', cx: 50, cy: 50, r: radius, fill: 'transparent', strokeWidth: strokeWidth, stroke: color, strokeDasharray: dashArray, strokeDashoffset: offset, transform: "rotate(" + angle + " " + cx + " " + cy + ")" }, animate ? (React.createElement("animateTransform", { attributeName: 'transform', attributeType: 'XML', type: 'rotate', from: startAngle + " " + cx + " " + cy, to: angle + " " + cx + " " + cy, dur: '1s' })) : null));
};

export { Donut, DonutElement, DonutLabel, DonutMultiple, DonutValue };
//# sourceMappingURL=index.es.js.map
