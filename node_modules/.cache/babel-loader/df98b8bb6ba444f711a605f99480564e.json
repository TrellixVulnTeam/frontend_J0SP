{"ast":null,"code":"var _jsxFileName = \"/home/imane/Documents/M1/S2/Projet annuel/frontend/src/pages/SeriesChallenges.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport Axios from '../axios-config';\nimport { SeriesListitem } from '../components/SeriesListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Series = () => {\n  _s();\n\n  const [series, setSeries] = useState([]);\n  useEffect(() => {\n    const fetchChallenges = async () => {\n      Axios.get('/series').then(({\n        data\n      }) => {\n        setSeries(data.content);\n      }).catch(err => {\n        if (err.isAxiosError) {\n          var _err$response;\n\n          toast.error(`Could not load series: ${(_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data.message}`);\n        } else {\n          toast.error(`Could not load series: ${err}`);\n        }\n      });\n    };\n\n    fetchChallenges();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 m-5\",\n      children: [series.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Nothing to show here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 33\n      }, this), series.map((serie, index) => /*#__PURE__*/_jsxDEV(SeriesListitem, {\n        serie: serie\n      }, `serie-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Series, \"JrKyrireM3qconWc/u7fjZBU/44=\");\n\n_c = Series;\n\nvar _c;\n\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"sources":["/home/imane/Documents/M1/S2/Projet annuel/frontend/src/pages/SeriesChallenges.tsx"],"names":["React","useEffect","useState","toast","Axios","SeriesListitem","Series","series","setSeries","fetchChallenges","get","then","data","content","catch","err","isAxiosError","error","response","message","length","map","serie","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,cAAT,QAA+B,8BAA/B;;;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,eAAe,GAAG,YAAY;AAClCL,MAAAA,KAAK,CAACM,GAAN,CAAU,SAAV,EACGC,IADH,CACQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClBJ,QAAAA,SAAS,CAACI,IAAI,CAACC,OAAN,CAAT;AACD,OAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACd,YAAIA,GAAG,CAACC,YAAR,EAAsB;AAAA;;AACpBb,UAAAA,KAAK,CAACc,KAAN,CAAa,0BAAD,iBAA0BF,GAAG,CAACG,QAA9B,kDAA0B,cAAcN,IAAd,CAAmBO,OAAQ,EAAjE;AACD,SAFD,MAEO;AACLhB,UAAAA,KAAK,CAACc,KAAN,CAAa,0BAAyBF,GAAI,EAA1C;AACD;AACF,OAVH;AAWD,KAZD;;AAcAN,IAAAA,eAAe;AAChB,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,iBACGF,MAAM,CAACa,MAAP,KAAkB,CAAlB,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD1B,EAEGb,MAAM,CAACc,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,kBACV,QAAC,cAAD;AAAgB,QAAA,KAAK,EAAED;AAAvB,SAAoC,SAAQC,KAAM,EAAlD;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD,CA/BM;;GAAMjB,M;;KAAAA,M","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport Axios from '../axios-config';\nimport { SeriesListitem } from '../components/SeriesListItem';\n\nexport const Series = () => {\n  const [series, setSeries] = useState([]);\n\n  useEffect(() => {\n    const fetchChallenges = async () => {\n      Axios.get('/series')\n        .then(({ data }) => {\n          setSeries(data.content);\n        })\n        .catch((err) => {\n          if (err.isAxiosError) {\n            toast.error(`Could not load series: ${err.response?.data.message}`);\n          } else {\n            toast.error(`Could not load series: ${err}`);\n          }\n        });\n    };\n\n    fetchChallenges();\n  }, []);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-3 gap-4 m-5\">\n        {series.length === 0 && <span>Nothing to show here.</span>}\n        {series.map((serie, index) => (\n          <SeriesListitem serie={serie} key={`serie-${index}`} />\n        ))}\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}