import { AuthContextInterface } from './types';
/**
 * @class RefreshToken
 *
 * Refreshes Token
 */
declare class RefreshToken {
    private context;
    /**
     * @param context
     * @constructor
     */
    constructor(context: AuthContextInterface);
    /**
     * Get the current Refresh Token
     * @returns refresh token
     */
    getCurrentRefreshToken(): {
        refreshToken: string | null;
        refreshTokenExpireAt: Date | null;
    };
    /**
     * Get the Current Auth State
     * @returns a object with
     * authState: The Auth Token,
     * authTokenType: type of auth token,
     * expireAt: expire time
     */
    getCurrentAuthState(): {
        authToken: string | null;
        authTokenType: string | null;
        expireAt: Date | null;
    };
    /**
     * Get the Current User State
     * @returns User State {object}
     */
    getCurrentUserState(): object | null;
    /**
     * Updates the Current Refresh Token
     *
     * @param refreshToken - new refresh Token
     * @param expiresIn
     */
    updateRefreshToken(refreshToken: string, expiresIn: number): void;
    /**
     * updates the AuthState
     * @param authToken - The Updated authToken
     * @param authTokenType - The updated authType (optional)
     * @param expiresIn - The updated expiresIn in minutes. (optional)
     *
     * If the new authToken has different expire time,
     * then you must have to update the expiresIn param
     */
    updateAuthState(authToken: string, authTokenType?: string, expiresIn?: number): void;
    /**
     * Updates the Auth User's state
     * @param userState
     */
    updateUserState(userState: object): void;
}
export default RefreshToken;
